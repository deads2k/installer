package manifests

import (
	"path/filepath"

	"github.com/ghodss/yaml"
	"github.com/pkg/errors"

	configv1 "github.com/openshift/api/config/v1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var (
	featureGateFilename = filepath.Join(manifestDir, "cluster-featuregate-02-config.yml")
)

// FeatureGate generates the cluster-ingress-*.yml files.
type FeatureGate struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*FeatureGate)(nil)

// Name returns a human friendly name for the asset.
func (*FeatureGate) Name() string {
	return "FeatureGate Config"
}

// Dependencies returns all of the dependencies directly needed to generate the asset.
func (*FeatureGate) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the FeatureGate and its CRD.
func (c *FeatureGate) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	dependencies.Get(installConfig)

	config := &configv1.FeatureGate{
		TypeMeta: metav1.TypeMeta{
			APIVersion: configv1.GroupVersion.String(),
			Kind:       "FeatureGate",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "cluster",
			// not namespaced
		},
	}

	configData, err := yaml.Marshal(config)
	if err != nil {
		return errors.Wrapf(err, "failed to create %s manifests from InstallConfig", c.Name())
	}

	c.FileList = []*asset.File{
		{
			Filename: featureGateFilename,
			Data:     configData,
		},
	}

	return nil
}

// Files returns the files generated by the asset.
func (c *FeatureGate) Files() []*asset.File {
	return c.FileList
}

// Load returns false since this asset is not written to disk by the installer.
func (c *FeatureGate) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
